---
export interface Props {
  slides: {
    image: string;
    alt: string;
    title: string;
    description: string;
    link?: string;
  }[];
}

const { slides } = Astro.props;
---

<section class="carousel-section">
  <div class="container">
    <div class="carousel-wrapper">
      <div class="carousel-container">
        {slides.map((slide, index) => (
          <div class={`carousel-slide ${index === 0 ? 'active' : ''}`} data-target={slide.link}>
            <img src={slide.image} alt={slide.alt} loading="lazy" />
            <div class="carousel-content">
              <h3>{slide.title}</h3>
              <p>{slide.description}</p>
            </div>
          </div>
        ))}
      </div>
      <div class="carousel-dots">
        {slides.map((_, index) => (
          <span class={`dot ${index === 0 ? 'active' : ''}`} data-slide={index}></span>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .carousel-section {
    padding: 3rem 0;
  }

  .carousel-wrapper {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    background: var(--color-surface);
  }

  .carousel-container {
    display: flex;
    transition: transform 0.5s ease;
  }

  .carousel-slide {
    min-width: 100%;
    position: relative;
    cursor: pointer;
    display: none;
  }

  .carousel-slide.active {
    display: block;
  }

  .carousel-slide img {
    width: 100%;
    height: 400px;
    object-fit: cover;
  }

  .carousel-content {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0,0,0,0.8));
    color: white;
    padding: 2rem;
  }

  .carousel-content h3 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .carousel-content p {
    font-size: 1rem;
    opacity: 0.9;
  }

  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    padding: 1rem;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #ccc;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .dot.active {
    background: var(--color-accent);
  }

  @media (max-width: 768px) {
    .carousel-slide img {
      height: 250px;
    }

    .carousel-content h3 {
      font-size: 1.25rem;
    }

    .carousel-content p {
      font-size: 0.875rem;
    }
  }
</style>

<script>
  class Carousel {
    private container: HTMLElement;
    private slides: NodeListOf<HTMLElement>;
    private dots: NodeListOf<HTMLElement>;
    private currentSlide: number = 0;
    private slideInterval: number | null = null;

    constructor(container: HTMLElement) {
      this.container = container;
      this.slides = container.querySelectorAll('.carousel-slide');
      this.dots = container.querySelectorAll('.dot');
      
      this.init();
    }

    init() {
      // ドットクリックイベント
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          this.goToSlide(index);
        });
      });

      // スライドクリックイベント
      this.slides.forEach((slide) => {
        slide.addEventListener('click', () => {
          const target = slide.dataset.target;
          if (target) {
            window.location.href = target;
          }
        });
      });

      // 自動スライド開始
      this.startAutoSlide();

      // ホバー時に自動スライド停止
      this.container.addEventListener('mouseenter', () => {
        this.stopAutoSlide();
      });

      this.container.addEventListener('mouseleave', () => {
        this.startAutoSlide();
      });
    }

    goToSlide(index: number) {
      // 現在のアクティブを削除
      this.slides[this.currentSlide].classList.remove('active');
      this.dots[this.currentSlide].classList.remove('active');

      // 新しいスライドをアクティブに
      this.currentSlide = index;
      this.slides[this.currentSlide].classList.add('active');
      this.dots[this.currentSlide].classList.add('active');
    }

    nextSlide() {
      const nextIndex = (this.currentSlide + 1) % this.slides.length;
      this.goToSlide(nextIndex);
    }

    startAutoSlide() {
      this.slideInterval = window.setInterval(() => {
        this.nextSlide();
      }, 4000); // 4秒間隔
    }

    stopAutoSlide() {
      if (this.slideInterval) {
        window.clearInterval(this.slideInterval);
        this.slideInterval = null;
      }
    }
  }

  // カルーセル初期化
  document.addEventListener('DOMContentLoaded', () => {
    const carouselWrapper = document.querySelector('.carousel-wrapper');
    if (carouselWrapper) {
      new Carousel(carouselWrapper as HTMLElement);
    }
  });
</script>